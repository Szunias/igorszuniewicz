/**
 * Cross-Page Navigation Verification Script
 * Tests navigation functionality across all pages
 */

const fs = require('fs');
const path = require('path');

const mainPages = [
    'index.html',
    'about.html',
    'contact.html',
    'music.html'
];

const projectPages = [
    'projects/index.html',
    'projects/akantilado.html',
    'projects/amorak.html',
    'projects/audiolab.html',
    'projects/audioq.html',
    'projects/environments.html',
    'projects/middleware2.html',
    'projects/musicforgames.html',
    'projects/not-today-darling.html',
    'projects/pause-and-deserve.html',
    'projects/pawism.html',
    'projects/ray-animation.html',
    'projects/richter.html',
    'projects/unreal-engine-rebuilder.html',
    'projects/wwise-unreal-fixer.html'
];

let totalTests = 0;
let passedTests = 0;
let failedTests = 0;
const issues = [];

function checkFile(filePath) {
    if (!fs.existsSync(filePath)) {
        issues.push(`‚ùå File not found: ${filePath}`);
        failedTests++;
        return null;
    }
    return fs.readFileSync(filePath, 'utf8');
}

function checkNavigation(filePath, content, isSubfolder = false) {
    totalTests++;
    const prefix = isSubfolder ? '../' : '';
    
    // Check for navigation.css link
    const navCSSPattern = new RegExp(`<link[^>]*href="${prefix}assets/css/navigation\\.css"`);
    const hasNavCSS = navCSSPattern.test(content);
    
    // Check for navigation.js script
    const navJSPattern = new RegExp(`<script[^>]*src="${prefix}assets/js/components/navigation\\.js"`);
    const hasNavJS = navJSPattern.test(content);
    
    // Check for inline navigation styles (should NOT exist)
    const inlineNavPatterns = [
        /\.header\s*\{/,
        /\.nav-links\s*\{/,
        /\.mobile-menu\s*\{/,
        /\.mobile-menu-toggle\s*\{/
    ];
    
    const hasInlineStyles = inlineNavPatterns.some(pattern => pattern.test(content));
    
    // Check for hardcoded navigation HTML (should NOT exist)
    const hasHardcodedNav = content.includes('<header') && content.includes('<nav');
    
    const allChecks = hasNavCSS && hasNavJS && !hasInlineStyles && !hasHardcodedNav;
    
    if (allChecks) {
        console.log(`‚úÖ ${filePath}: Navigation properly configured`);
        passedTests++;
    } else {
        console.log(`‚ùå ${filePath}: Navigation issues detected`);
        if (!hasNavCSS) issues.push(`  - Missing navigation.css link in ${filePath}`);
        if (!hasNavJS) issues.push(`  - Missing navigation.js script in ${filePath}`);
        if (hasInlineStyles) issues.push(`  - Has inline navigation styles in ${filePath}`);
        if (hasHardcodedNav) issues.push(`  - Has hardcoded navigation HTML in ${filePath}`);
        failedTests++;
    }
    
    return allChecks;
}

function checkNavigationLinks(filePath, content, isSubfolder = false) {
    totalTests++;
    const prefix = isSubfolder ? '../' : '';
    
    // Expected navigation links
    const expectedLinks = [
        `href="${prefix}index.html"`,
        `href="${prefix}about.html"`,
        `href="${prefix}projects/"`,
        `href="${prefix}music.html"`,
        `href="${prefix}contact.html"`
    ];
    
    // Since navigation is generated by JS, we can't check the HTML directly
    // Instead, verify that navigation.js is loaded which will generate the links
    const hasNavJS = content.includes('navigation.js');
    
    if (hasNavJS) {
        console.log(`‚úÖ ${filePath}: Navigation component will generate correct links`);
        passedTests++;
        return true;
    } else {
        console.log(`‚ùå ${filePath}: Navigation component not loaded`);
        issues.push(`  - Navigation.js not loaded in ${filePath}`);
        failedTests++;
        return false;
    }
}

console.log('üß™ Cross-Page Navigation Verification\n');
console.log('=' .repeat(60));

// Check navigation component files exist
console.log('\nüìÅ Checking Navigation Component Files...\n');
totalTests++;
if (fs.existsSync('assets/js/components/navigation.js')) {
    console.log('‚úÖ navigation.js exists');
    passedTests++;
} else {
    console.log('‚ùå navigation.js not found');
    issues.push('  - Missing assets/js/components/navigation.js');
    failedTests++;
}

totalTests++;
if (fs.existsSync('assets/css/navigation.css')) {
    console.log('‚úÖ navigation.css exists');
    passedTests++;
} else {
    console.log('‚ùå navigation.css not found');
    issues.push('  - Missing assets/css/navigation.css');
    failedTests++;
}

// Check main pages
console.log('\nüìÑ Checking Main Pages (Root Level)...\n');
for (const page of mainPages) {
    const content = checkFile(page);
    if (content) {
        checkNavigation(page, content, false);
        checkNavigationLinks(page, content, false);
    }
}

// Check project pages
console.log('\nüìÅ Checking Project Pages (Subfolder Level)...\n');
for (const page of projectPages) {
    const content = checkFile(page);
    if (content) {
        checkNavigation(page, content, true);
        checkNavigationLinks(page, content, true);
    }
}

// Summary
console.log('\n' + '='.repeat(60));
console.log('\nüìä Test Summary\n');
console.log(`Total Tests: ${totalTests}`);
console.log(`‚úÖ Passed: ${passedTests}`);
console.log(`‚ùå Failed: ${failedTests}`);
console.log(`Success Rate: ${((passedTests / totalTests) * 100).toFixed(1)}%`);

if (issues.length > 0) {
    console.log('\n‚ö†Ô∏è  Issues Found:\n');
    issues.forEach(issue => console.log(issue));
}

console.log('\n' + '='.repeat(60));

if (failedTests === 0) {
    console.log('\n‚úÖ All cross-page navigation tests passed!');
    console.log('Navigation is properly configured across all pages.');
    process.exit(0);
} else {
    console.log('\n‚ùå Some tests failed. Please review the issues above.');
    process.exit(1);
}
