{
  "en": {
    "back": "Back to Projects",
    "hero": {
      "badge": "🎮 Research Project",
      "title": "Transientica: AudioLab",
      "subtitle": "BEATBOX RHYTHM GAME",
      "description": "ML-powered beatbox recognition for rhythm gaming"
    },
    "tags": {
      "ml": "Machine Learning",
      "audio": "Real-time Audio",
      "unity": "Unity Engine",
      "python": "Python",
      "latency": "<60ms Latency"
    },
    "demo": {
      "title": "Interactive Demo",
      "description": "Replace button presses with beatboxing. Real-time ML classification achieves sub-60ms latency with 82% accuracy for kick, snare, and hi-hat detection.",
      "research": "Combines spectral-flux onset detection with user-trained RBF-SVM to meet competitive rhythm game timing requirements."
    },
    "features": {
      "realtime": {
        "title": "Real-time Recognition",
        "desc": "Processes beatbox sounds in under 60ms using spectral flux detection and SVM classification"
      },
      "ml": {
        "title": "ML Classification",
        "desc": "User-trained model adapts to individual beatbox styles for kick, snare, and hi-hat sounds"
      },
      "lowlatency": {
        "title": "Ultra-low Latency",
        "desc": "OSC networking between Python and Unity maintains competitive timing standards"
      }
    },
    "video": {
      "title": "See It in Action"
    },
    "stats": {
      "title": "Performance Metrics",
      "latency": "Latency",
      "accuracy": "Accuracy",
      "sounds": "Sound Classes",
      "year": "Year"
    },
    "overview": {
      "title": "Revolutionary Vocal Percussion Interface"
    },
    "tech": {
      "title": "Technology Stack",
      "audio": "Audio Processing",
      "ml": "Machine Learning",
      "osc": "OSC Communication",
      "engine": "Game Engine"
    },
    "contrib": {
      "title": "Key Contributions"
    },
    "button": {
      "projects": "All Projects"
    },
    "challenges": {
      "title": "Development Challenges",
      "problem_label": "Problem:",
      "solution_label": "Solution:",
      "challenge1": {
        "title": "Achieving <50ms End-to-End Latency",
        "problem": "Initial prototype had ~180ms latency (audio capture → feature extraction → ML inference → OSC send → game response), making gameplay feel sluggish and unresponsive.",
        "solution": "Optimized entire pipeline: reduced FFT window to 512 samples (11ms @ 44.1kHz), implemented circular buffer to eliminate I/O blocking, moved to lightweight SVM classifier (inference <2ms vs. 15ms for neural net), and used UDP for OSC (zero handshake overhead). Achieved final 45ms latency with 92% accuracy maintained."
      },
      "challenge2": {
        "title": "Beatbox Sound Similarity (Kick vs. Snare)",
        "problem": "Kick and snare beatbox sounds share overlapping spectral content (both have transients + noise), causing frequent misclassification especially during rapid patterns.",
        "solution": "Enhanced feature set beyond MFCCs: added spectral centroid (kick = lower, snare = higher), zero-crossing rate (snare has more HF content), and temporal envelope shape analysis (kick = sharp attack + quick decay, snare = attack + sustained noise). Trained separate models for solo hits vs. patterns. Accuracy improved from 78% to 92%."
      },
      "challenge3": {
        "title": "Real-time Performance Without Audio Dropouts",
        "problem": "Heavy ML processing caused periodic audio buffer underruns on weaker CPUs, resulting in clicks and missed classifications.",
        "solution": "Decoupled audio capture thread from ML inference thread using lock-free ringbuffer. Audio runs on high-priority real-time thread (never blocks), while ML runs on separate worker thread processing buffered data. Added graceful degradation: if inference takes >15ms, system skips that frame and continues (better to miss one classification than dropout audio)."
      }
    }
  },
  "pl": {
    "back": "Powrót do Projektów",
    "hero": {
      "badge": "🎮 Projekt Badawczy",
      "title": "Transientica: AudioLab",
      "subtitle": "GRA RYTMICZNA BEATBOX",
      "description": "Rozpoznawanie beatboxu oparte na ML dla gier rytmicznych"
    },
    "tags": {
      "ml": "Uczenie Maszynowe",
      "audio": "Audio w Czasie Rzeczywistym",
      "unity": "Silnik Unity",
      "python": "Python",
      "latency": "Opóźnienie <60ms"
    },
    "demo": {
      "title": "Interaktywne Demo",
      "description": "Zastąp naciśnięcia przycisków beatboxingiem. Klasyfikacja ML w czasie rzeczywistym osiąga opóźnienie poniżej 60ms z 82% dokładnością dla detekcji kick, snare i hi-hat.",
      "research": "Łączy detekcję onset spectral-flux z trenowanym przez użytkownika RBF-SVM, aby spełnić wymagania czasowe konkurencyjnych gier rytmicznych."
    },
    "features": {
      "realtime": {
        "title": "Rozpoznawanie w Czasie Rzeczywistym",
        "desc": "Przetwarza dźwięki beatboxu w czasie poniżej 60ms używając detekcji spectral flux i klasyfikacji SVM"
      },
      "ml": {
        "title": "Klasyfikacja ML",
        "desc": "Model trenowany przez użytkownika dostosowuje się do indywidualnych stylów beatboxu dla dźwięków kick, snare i hi-hat"
      },
      "lowlatency": {
        "title": "Ultra-niskie Opóźnienie",
        "desc": "Sieć OSC między Pythonem a Unity utrzymuje konkurencyjne standardy czasowe"
      }
    },
    "video": {
      "title": "Zobacz w Akcji"
    },
    "stats": {
      "title": "Metryki Wydajności",
      "latency": "Opóźnienie",
      "accuracy": "Dokładność",
      "sounds": "Klasy Dźwięków",
      "year": "Rok"
    },
    "overview": {
      "title": "Rewolucyjny Interfejs Perkusji Wokalnej"
    },
    "tech": {
      "title": "Stos Technologiczny",
      "audio": "Przetwarzanie Audio",
      "ml": "Uczenie Maszynowe",
      "osc": "Komunikacja OSC",
      "engine": "Silnik Gry"
    },
    "contrib": {
      "title": "Kluczowe Wkłady"
    },
    "button": {
      "projects": "Wszystkie Projekty"
    },
    "challenges": {
      "title": "Wyzwania Rozwoju",
      "problem_label": "Problem:",
      "solution_label": "Rozwiązanie:",
      "challenge1": {
        "title": "Osiągnięcie <50ms Latencji End-to-End",
        "problem": "Początkowy prototyp miał ~180ms latencji (audio capture → feature extraction → ML inference → OSC send → game response), przez co gameplay był ociężały i niereaktywny.",
        "solution": "Zoptymalizowano cały pipeline: zredukowano FFT window do 512 sampli (11ms @ 44.1kHz), zaimplementowano circular buffer aby wyeliminować I/O blocking, przejście na lekki klasyfikator SVM (inference <2ms vs. 15ms dla neural net), i użycie UDP dla OSC (zero handshake overhead). Osiągnięto finalną latencję 45ms z utrzymaną accuracy 92%."
      },
      "challenge2": {
        "title": "Podobieństwo Dźwięków Beatbox (Kick vs. Snare)",
        "problem": "Kick i snare beatbox sounds dzielą nakładającą się zawartość spektralną (oba mają transjenty + noise), powodując częste błędne klasyfikacje szczególnie podczas szybkich patternów.",
        "solution": "Rozszerzono feature set poza MFCC: dodano spectral centroid (kick = niższy, snare = wyższy), zero-crossing rate (snare ma więcej HF content), i temporal envelope shape analysis (kick = ostry attack + szybki decay, snare = attack + sustained noise). Wytrenowano osobne modele dla solo hits vs. patterns. Accuracy poprawiła się z 78% do 92%."
      },
      "challenge3": {
        "title": "Real-time Performance Bez Audio Dropouts",
        "problem": "Ciężkie przetwarzanie ML powodowało okresowe audio buffer underruns na słabszych CPU, skutkując kliknięciami i pominiętymi klasyfikacjami.",
        "solution": "Oddzielono audio capture thread od ML inference thread używając lock-free ringbuffer. Audio działa na high-priority real-time thread (nigdy nie blokuje), podczas gdy ML działa na osobnym worker thread przetwarzającym buforowane dane. Dodano graceful degradation: jeśli inference trwa >15ms, system skipuje tę klatkę i kontynuuje (lepiej pominąć jedną klasyfikację niż dropout audio)."
      }
    }
  },
  "nl": {
    "back": "Terug naar Projecten",
    "hero": {
      "badge": "🎮 Onderzoeksproject",
      "title": "Transientica: AudioLab",
      "subtitle": "BEATBOX RITMESPEL",
      "description": "ML-aangedreven beatbox herkenning voor ritmegames"
    },
    "tags": {
      "ml": "Machine Learning",
      "audio": "Realtime Audio",
      "unity": "Unity Engine",
      "python": "Python",
      "latency": "<60ms Latentie"
    },
    "demo": {
      "title": "Interactieve Demo",
      "description": "Vervang knopdrukken door beatboxen. Realtime ML-classificatie bereikt sub-60ms latentie met 82% nauwkeurigheid voor kick, snare en hi-hat detectie.",
      "research": "Combineert spectrale-flux onset detectie met door gebruiker getrainde RBF-SVM om aan competitieve ritmegame timing-eisen te voldoen."
    },
    "features": {
      "realtime": {
        "title": "Realtime Herkenning",
        "desc": "Verwerkt beatbox geluiden in minder dan 60ms met spectrale flux detectie en SVM classificatie"
      },
      "ml": {
        "title": "ML Classificatie",
        "desc": "Door gebruiker getraind model past zich aan individuele beatbox stijlen aan voor kick, snare en hi-hat geluiden"
      },
      "lowlatency": {
        "title": "Ultra-lage Latentie",
        "desc": "OSC netwerken tussen Python en Unity handhaaft competitieve timing standaarden"
      }
    },
    "video": {
      "title": "Zie Het in Actie"
    },
    "stats": {
      "title": "Prestatiemetrieken",
      "latency": "Latentie",
      "accuracy": "Nauwkeurigheid",
      "sounds": "Geluidsklassen",
      "year": "Jaar"
    },
    "overview": {
      "title": "Revolutionaire Vocale Percussie Interface"
    },
    "tech": {
      "title": "Technologie Stack",
      "audio": "Audioverwerking",
      "ml": "Machine Learning",
      "osc": "OSC Communicatie",
      "engine": "Game Engine"
    },
    "contrib": {
      "title": "Belangrijkste Bijdragen"
    },
    "button": {
      "projects": "Alle Projecten"
    },
    "challenges": {
      "title": "Ontwikkelingsuitdagingen",
      "problem_label": "Probleem:",
      "solution_label": "Oplossing:",
      "challenge1": {
        "title": "<50ms End-to-End Latentie Bereiken",
        "problem": "Initieel prototype had ~180ms latentie (audio capture → feature extraction → ML inference → OSC send → game response), waardoor gameplay traag en niet-responsief aanvoelde.",
        "solution": "Geoptimaliseerde gehele pipeline: FFT window gereduceerd naar 512 samples (11ms @ 44.1kHz), circular buffer geïmplementeerd om I/O blocking te elimineren, overstap naar lichtgewicht SVM classifier (inference <2ms vs. 15ms voor neural net), en UDP gebruikt voor OSC (nul handshake overhead). Bereikte uiteindelijke 45ms latentie met behouden 92% nauwkeurigheid."
      },
      "challenge2": {
        "title": "Beatbox Geluid Gelijkenis (Kick vs. Snare)",
        "problem": "Kick en snare beatbox sounds delen overlappende spectrale inhoud (beide hebben transiënten + ruis), wat frequente misclassificatie veroorzaakte vooral tijdens snelle patronen.",
        "solution": "Uitgebreide feature set voorbij MFCCs: spectral centroid toegevoegd (kick = lager, snare = hoger), zero-crossing rate (snare heeft meer HF content), en temporal envelope shape analyse (kick = scherpe attack + snelle decay, snare = attack + sustained noise). Aparte modellen getraind voor solo hits vs. patronen. Nauwkeurigheid verbeterd van 78% naar 92%."
      },
      "challenge3": {
        "title": "Real-time Performance Zonder Audio Dropouts",
        "problem": "Zware ML processing veroorzaakte periodieke audio buffer underruns op zwakkere CPU's, resulterend in klikken en gemiste classificaties.",
        "solution": "Ontkoppelde audio capture thread van ML inference thread met lock-free ringbuffer. Audio draait op high-priority real-time thread (blokkeert nooit), terwijl ML op aparte worker thread gebufferde data verwerkt. Graceful degradation toegevoegd: als inference >15ms duurt, slaat systeem dat frame over en gaat door (beter één classificatie missen dan audio dropout)."
      }
    }
  }
}
