{
  "en": {
    "back": "Back to Projects",
    "hero": {
      "badge": "ðŸŽ® Research Project",
      "title": "Transientica: AudioLab",
      "subtitle": "BEATBOX RHYTHM GAME",
      "description": "ML-powered beatbox recognition for rhythm gaming",
      "year": "2024"
    },
    "tags": {
      "ml": "Machine Learning",
      "audio": "Real-time Audio",
      "unity": "Unity Engine",
      "python": "Python",
      "latency": "<60ms Latency"
    },
    "context": {
      "title": "Project Context",
      "type_label": "Type",
      "type_value": "Student Research Project",
      "institution_label": "Institution",
      "institution_value": "Howest DAE",
      "year_label": "Year",
      "year_value": "2025",
      "duration_label": "Duration",
      "duration_value": "5 months",
      "role_label": "My Role",
      "role_value": "Audio Programmer & Designer"
    },
    "demo": {
      "title": "Interactive Demo",
      "description": "Replace button presses with beatboxing. ML classifies sounds in under 60ms. 82% accuracy for kick, snare, hi-hat.",
      "research": "Spectral-flux onset detection plus trained SVM model. Fast enough for rhythm games."
    },
    "features": {
      "realtime": {
        "title": "Real-time Recognition",
        "desc": "Processes beatbox sounds in under 60ms using spectral flux detection and SVM classification"
      },
      "ml": {
        "title": "ML Classification",
        "desc": "User-trained model adapts to individual beatbox styles for kick, snare, and hi-hat sounds"
      },
      "lowlatency": {
        "title": "Ultra-low Latency",
        "desc": "OSC networking between Python and Unity maintains competitive timing standards"
      }
    },
    "video": {
      "title": "See It in Action"
    },
    "stats": {
      "title": "Performance Metrics",
      "latency": "Latency",
      "accuracy": "Accuracy",
      "sounds": "Sound Classes",
      "year": "Year"
    },
    "overview": {
      "title": "Vocal Percussion Interface"
    },
    "tech": {
      "title": "Technology Stack",
      "audio": "Audio Processing",
      "ml": "Machine Learning",
      "osc": "OSC Communication",
      "engine": "Game Engine"
    },
    "contrib": {
      "title": "Key Contributions"
    },
    "button": {
      "projects": "All Projects"
    },
    "challenges": {
      "title": "Development Challenges",
      "problem_label": "Problem:",
      "solution_label": "Solution:",
      "challenge1": {
        "title": "Getting Latency Under 50ms",
        "problem": "First version had 180ms lag. Audio in, features, ML, network, game. Too slow.",
        "solution": "Optimized pipeline. Smaller FFT window (512 samples, 11ms). Circular buffer kills I/O blocking. Lightweight SVM (2ms vs 15ms neural net). UDP for OSC. Got it to 45ms with 92% accuracy."
      },
      "challenge2": {
        "title": "Kick vs Snare",
        "problem": "Kick and snare sound similar. Both have transients and noise. Lots of wrong guesses.",
        "solution": "Added more features. Spectral centroid (kick lower, snare higher). Zero-crossing rate (snare has more highs). Envelope shape (kick sharp, snare sustained). Separate models for solo vs patterns. 78% to 92% accuracy."
      },
      "challenge3": {
        "title": "No Audio Dropouts",
        "problem": "Heavy ML caused buffer underruns on weak CPUs. Clicks and missed sounds.",
        "solution": "Separated audio and ML threads. Lock-free ringbuffer between them. Audio on high priority, never blocks. ML on worker thread. If ML takes too long, skip that frame. Better to miss one sound than drop audio."
      }
    }
  },
  "pl": {
    "back": "PowrÃ³t do ProjektÃ³w",
    "hero": {
      "badge": "ðŸŽ® Projekt Badawczy",
      "title": "Transientica: AudioLab",
      "subtitle": "GRA RYTMICZNA BEATBOX",
      "description": "Rozpoznawanie beatboxu oparte na ML dla gier rytmicznych",
      "year": "2024"
    },
    "tags": {
      "ml": "Uczenie Maszynowe",
      "audio": "Audio w Czasie Rzeczywistym",
      "unity": "Silnik Unity",
      "python": "Python",
      "latency": "OpÃ³Åºnienie <60ms"
    },
    "demo": {
      "title": "Interaktywne Demo",
      "description": "ZamieÅ„ przyciski na beatboxing. ML klasyfikuje dÅºwiÄ™ki w poniÅ¼ej 60ms. 82% dokÅ‚adnoÅ›ci dla kick, snare, hi-hat.",
      "research": "Spectral-flux plus wytrenowany model SVM. WystarczajÄ…co szybkie dla gier rytmicznych."
    },
    "features": {
      "realtime": {
        "title": "Rozpoznawanie w Czasie Rzeczywistym",
        "desc": "Przetwarza dÅºwiÄ™ki beatboxu w czasie poniÅ¼ej 60ms uÅ¼ywajÄ…c spectral flux i SVM"
      },
      "ml": {
        "title": "Klasyfikacja ML",
        "desc": "Model trenowany przez uÅ¼ytkownika dostosowuje siÄ™ do stylÃ³w beatboxu dla kick, snare i hi-hat"
      },
      "lowlatency": {
        "title": "Ultra-niskie OpÃ³Åºnienie",
        "desc": "OSC miÄ™dzy Pythonem a Unity utrzymuje standardy czasowe"
      }
    },
    "video": {
      "title": "Zobacz w Akcji"
    },
    "stats": {
      "title": "Metryki WydajnoÅ›ci",
      "latency": "OpÃ³Åºnienie",
      "accuracy": "DokÅ‚adnoÅ›Ä‡",
      "sounds": "Klasy DÅºwiÄ™kÃ³w",
      "year": "Rok"
    },
    "overview": {
      "title": "Interfejs Perkusji Wokalnej"
    },
    "tech": {
      "title": "Stos Technologiczny",
      "audio": "Przetwarzanie Audio",
      "ml": "Uczenie Maszynowe",
      "osc": "Komunikacja OSC",
      "engine": "Silnik Gry"
    },
    "contrib": {
      "title": "Kluczowe WkÅ‚ady"
    },
    "button": {
      "projects": "Wszystkie Projekty"
    },
    "challenges": {
      "title": "Wyzwania Rozwoju",
      "problem_label": "Problem:",
      "solution_label": "RozwiÄ…zanie:",
      "challenge1": {
        "title": "ZejÅ›cie PoniÅ¼ej 50ms Latencji",
        "problem": "Pierwsza wersja miaÅ‚a 180ms lag. Audio, features, ML, sieÄ‡, gra. Za wolne.",
        "solution": "Optymalizacja pipeline. Mniejsze okno FFT (512 sampli, 11ms). Circular buffer zabija I/O blocking. Lekkie SVM (2ms vs 15ms neural net). UDP dla OSC. DoszÅ‚o do 45ms z 92% accuracy."
      },
      "challenge2": {
        "title": "Kick vs Snare",
        "problem": "Kick i snare brzmiÄ… podobnie. Oba majÄ… transjenty i szum. DuÅ¼o bÅ‚Ä™dnych trafieÅ„.",
        "solution": "Dodano wiÄ™cej features. Spectral centroid (kick niÅ¼ej, snare wyÅ¼ej). Zero-crossing rate (snare ma wiÄ™cej wysokich). KsztaÅ‚t envelope (kick ostry, snare trwaÅ‚y). Osobne modele dla solo vs patterns. Z 78% do 92% accuracy."
      },
      "challenge3": {
        "title": "Bez DropoutÃ³w Audio",
        "problem": "CiÄ™Å¼kie ML powodowaÅ‚o buffer underruns na sÅ‚abych CPU. KlikniÄ™cia i pominiÄ™te dÅºwiÄ™ki.",
        "solution": "Rozdzielono audio i ML na osobne wÄ…tki. Lock-free ringbuffer miÄ™dzy nimi. Audio na wysokim priorytecie, nigdy nie blokuje. ML na worker thread. JeÅ›li ML za dÅ‚ugo, skip tÄ™ klatkÄ™. Lepiej pominÄ…Ä‡ jeden dÅºwiÄ™k niÅ¼ dropout audio."
      }
    }
  },
  "nl": {
    "back": "Terug naar Projecten",
    "hero": {
      "badge": "ðŸŽ® Onderzoeksproject",
      "title": "Transientica: AudioLab",
      "subtitle": "BEATBOX RITMESPEL",
      "description": "ML-aangedreven beatbox herkenning voor ritmegames",
      "year": "2024"
    },
    "tags": {
      "ml": "Machine Learning",
      "audio": "Realtime Audio",
      "unity": "Unity Engine",
      "python": "Python",
      "latency": "<60ms Latentie"
    },
    "demo": {
      "title": "Interactieve Demo",
      "description": "Vervang knopdrukken door beatboxen. ML classificeert geluiden in onder 60ms. 82% nauwkeurigheid voor kick, snare, hi-hat.",
      "research": "Spectrale-flux plus getraind SVM model. Snel genoeg voor ritmegames."
    },
    "features": {
      "realtime": {
        "title": "Realtime Herkenning",
        "desc": "Verwerkt beatbox geluiden in minder dan 60ms met spectrale flux en SVM"
      },
      "ml": {
        "title": "ML Classificatie",
        "desc": "Door gebruiker getraind model past zich aan beatbox stijlen aan voor kick, snare en hi-hat"
      },
      "lowlatency": {
        "title": "Ultra-lage Latentie",
        "desc": "OSC tussen Python en Unity handhaaft timing standaarden"
      }
    },
    "video": {
      "title": "Zie Het in Actie"
    },
    "stats": {
      "title": "Prestatiemetrieken",
      "latency": "Latentie",
      "accuracy": "Nauwkeurigheid",
      "sounds": "Geluidsklassen",
      "year": "Jaar"
    },
    "overview": {
      "title": "Vocale Percussie Interface"
    },
    "tech": {
      "title": "Technologie Stack",
      "audio": "Audioverwerking",
      "ml": "Machine Learning",
      "osc": "OSC Communicatie",
      "engine": "Game Engine"
    },
    "contrib": {
      "title": "Belangrijkste Bijdragen"
    },
    "button": {
      "projects": "Alle Projecten"
    },
    "challenges": {
      "title": "Ontwikkelingsuitdagingen",
      "problem_label": "Probleem:",
      "solution_label": "Oplossing:",
      "challenge1": {
        "title": "Onder 50ms Latentie Komen",
        "problem": "Eerste versie had 180ms lag. Audio in, features, ML, netwerk, game. Te traag.",
        "solution": "Pipeline geoptimaliseerd. Kleiner FFT window (512 samples, 11ms). Circular buffer doodt I/O blocking. Lichtgewicht SVM (2ms vs 15ms neural net). UDP voor OSC. Kwam naar 45ms met 92% accuracy."
      },
      "challenge2": {
        "title": "Kick vs Snare",
        "problem": "Kick en snare klinken vergelijkbaar. Beide hebben transiÃ«nten en ruis. Veel verkeerde treffers.",
        "solution": "Meer features toegevoegd. Spectral centroid (kick lager, snare hoger). Zero-crossing rate (snare heeft meer highs). Envelope vorm (kick scherp, snare sustained). Aparte modellen voor solo vs patronen. Van 78% naar 92% accuracy."
      },
      "challenge3": {
        "title": "Geen Audio Dropouts",
        "problem": "Zware ML veroorzaakte buffer underruns op zwakke CPU's. Klikken en gemiste geluiden.",
        "solution": "Audio en ML threads gescheiden. Lock-free ringbuffer ertussen. Audio op hoge prioriteit, blokkeert nooit. ML op worker thread. Als ML te lang duurt, skip dat frame. Beter Ã©Ã©n geluid missen dan audio dropout."
      }
    }
  }
}
